#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.1
# from Racc grammar file "".
#

###### racc/parser.rb begin
unless $".find {|p| p.end_with?('/racc/parser.rb')}
$".push "#{__dir__}/racc/parser.rb"
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
# frozen_string_literal: false
#--
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#++

unless $".find {|p| p.end_with?('/racc/info.rb')}
$".push "#{__dir__}/racc/info.rb"
#--
#
#
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
# see the file "COPYING".
#
#++

module Racc
  VERSION   = '1.7.1'
  Version = VERSION
  Copyright = 'Copyright (c) 1999-2006 Minero Aoki'
end

end


unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError # :nodoc:
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--executable=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+grammarfile+]
#   Racc grammar file. Any extension is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammar file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is ruby license, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extensions)
    Racc_No_Extensions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Core_Version_R = ::Racc::VERSION

    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end

      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extensions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def do_parse
      #{Racc_Main_Parsing_Routine}(_racc_setup(), false)
    end
    RUBY

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    class_eval <<~RUBY, __FILE__, __LINE__ + 1
    def yyparse(recv, mid)
      #{Racc_YY_Parse_Method}(recv, mid, _racc_setup(), false)
    end
    RUBY

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is +Symbol_Value_Stack[0]+.
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end
module Lrama
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 393)

include Lrama::Report::Duration

def initialize(text, path, debug = false)
  @text = text
  @path = path
  @yydebug = debug
end

def parse
  report_duration(:parse) do
    @lexer = Lrama::Lexer.new(@text)
    @grammar = Lrama::Grammar.new
    @precedence_number = 0
    do_parse
    @grammar.extract_references
    @grammar.prepare
    @grammar.compute_nullable
    @grammar.compute_first_set
    @grammar.validate!
    @grammar
  end
end

def next_token
  @lexer.next_token
end

def on_error(error_token_id, error_value, value_stack)
  source = @text.split("\n")[error_value.line - 1]
  raise ParseError, <<~ERROR
    #{@path}:#{@lexer.line}:#{@lexer.column}: parse error on value #{error_value.inspect} (#{token_to_str(error_token_id) || '?'})
    #{source}
    #{' ' * @lexer.column}^
  ERROR
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    82,     3,    83,    42,   133,    41,     8,    65,   123,    42,
    42,    41,    41,    65,   123,    56,   132,    32,     6,   -90,
     7,    39,    42,    38,    41,   -90,    65,    61,    42,    42,
    41,    41,    84,    38,   136,    42,    44,    41,    77,    65,
   136,    20,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    20,    22,    23,    24,    25,    26,    27,    28,    29,
    30,     9,    46,    46,    14,    12,    13,    15,    16,    17,
    18,    46,    49,    19,    20,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    42,    42,    41,    41,    50,    68,
    68,    42,    42,    41,    41,    51,    68,    68,    42,    42,
    41,    41,    65,   154,    42,    42,    41,    41,    65,   154,
    42,    42,    41,    41,    65,   154,    42,    42,    41,    41,
    65,   154,    42,    42,    41,    41,    65,   154,    42,    42,
    41,    41,    65,   154,    42,    42,    41,    41,    65,    65,
    42,    42,    41,    41,    65,    65,    42,    42,    41,    41,
    65,    42,    42,    41,    41,    42,    42,    41,    41,    42,
    52,    41,    53,    74,    78,    80,    85,    85,    85,    92,
    96,    97,   105,   106,   108,   109,   110,   111,   112,   113,
   116,   118,   119,   123,   124,   125,   137,   139,   140,   141,
   142,   143,   144,   123,    80,   147,   150,   158,   160,   163,
   164,    80,    80 ]

racc_action_check = [
    40,     1,    40,   121,   120,   121,     3,   121,   121,   145,
    25,   145,    25,   145,   145,    25,   120,     7,     2,   121,
     2,    12,    26,     9,    26,   145,    26,    26,    13,    55,
    13,    55,    40,    33,   121,    60,    14,    60,    33,    60,
   145,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    33,     4,    15,    16,     4,     4,     4,     4,     4,     4,
     4,    17,    18,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,    27,    28,    27,    28,    20,    27,
    28,    29,    30,    29,    30,    22,    29,    30,   142,    56,
   142,    56,   142,   142,   143,    66,   143,    66,   143,   143,
   144,    67,   144,    67,   144,   144,   151,    68,   151,    68,
   151,   151,   155,    71,   155,    71,   155,   155,   156,    72,
   156,    72,   156,   156,    61,    97,    61,    97,    61,    97,
    99,   117,    99,   117,    99,   117,   136,    73,   136,    73,
   136,    92,    94,    92,    94,   100,   102,   100,   102,   114,
    23,   114,    24,    31,    36,    37,    45,    47,    48,    54,
    58,    59,    79,    80,    86,    87,    88,    89,    90,    91,
    95,   103,   104,   105,   106,   107,   122,   126,   127,   128,
   129,   130,   131,   132,   134,   135,   138,   149,   157,   161,
   162,   163,   164 ]

racc_action_pointer = [
   nil,     1,     8,     6,    52,   nil,   nil,    10,   nil,    19,
   nil,   nil,    15,    25,    29,    43,    44,    52,    53,   nil,
    69,   nil,    76,   141,   143,     7,    19,    81,    82,    88,
    89,   161,   nil,    29,   nil,   nil,   143,   130,   nil,   nil,
    -5,   nil,   nil,   nil,   nil,   147,   nil,   148,   149,   nil,
   nil,   nil,   nil,   nil,   161,    26,    96,   nil,   164,   163,
    32,   131,   nil,   nil,   nil,   nil,   102,   108,   114,   nil,
   nil,   120,   126,   144,   nil,   nil,   nil,   nil,   nil,   140,
   168,   nil,   nil,   nil,   nil,   nil,   172,   173,   174,   175,
   176,   177,   148,   nil,   149,   173,   nil,   132,   nil,   137,
   152,   nil,   153,   170,   180,   175,   148,   183,   nil,   nil,
   nil,   nil,   nil,   nil,   156,   nil,   nil,   138,   nil,   nil,
   -17,     0,   167,   nil,   nil,   nil,   167,   168,   169,   170,
   171,   172,   185,   nil,   159,   176,   143,   nil,   176,   nil,
   nil,   nil,    95,   101,   107,     6,   nil,   nil,   nil,   195,
   nil,   113,   nil,   nil,   nil,   119,   125,   196,   nil,   nil,
   nil,   179,   180,   166,   167,   nil,   nil ]

racc_action_default = [
    -2,  -106,    -8,  -106,  -106,    -3,    -4,  -106,   167,  -106,
    -9,   -10,  -106,  -106,  -106,  -106,  -106,  -106,  -106,   -20,
  -106,   -24,  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,
  -106,  -106,    -7,   -93,   -71,   -73,  -106,   -88,   -92,   -11,
   -97,   -69,   -70,   -96,   -13,   -14,   -60,   -15,   -16,   -17,
   -21,   -25,   -28,   -31,   -34,   -40,  -106,   -43,   -46,   -35,
   -50,  -106,   -53,   -55,   -56,  -105,   -36,   -63,  -106,   -66,
   -68,   -37,   -38,   -39,    -5,    -1,   -72,   -94,   -74,  -106,
  -106,   -12,   -98,   -99,  -100,   -57,  -106,  -106,  -106,  -106,
  -106,  -106,  -106,   -44,   -41,   -48,   -47,  -106,   -54,   -51,
   -65,   -67,   -64,  -106,  -106,   -79,  -106,  -106,   -61,   -18,
   -22,   -26,   -29,   -32,   -42,   -45,   -49,   -52,    -6,   -95,
   -75,   -76,  -106,   -91,   -89,   -58,  -106,  -106,  -106,  -106,
  -106,  -106,   -79,   -78,   -88,  -106,  -106,   -84,  -106,   -62,
   -19,   -23,  -106,  -106,  -106,   -77,   -80,   -81,   -87,  -106,
   -59,   -27,  -101,  -103,  -104,   -30,   -33,  -106,   -85,  -102,
   -82,  -106,  -106,   -88,   -88,   -86,   -83 ]

racc_goto_table = [
    79,    62,    43,    55,    60,   101,   121,    93,    34,    66,
    71,    72,    73,   135,    58,     1,    70,    70,    70,    70,
   100,     2,   102,     4,   159,   100,   100,   100,   159,   159,
    33,    75,    76,   145,    94,    98,    62,   135,   101,    99,
   101,    45,    47,    48,    58,    58,    93,   151,   155,   156,
     5,    31,   103,    10,    11,    70,    70,    70,    40,    81,
    70,    70,    70,    87,   127,    88,    93,   128,    89,   129,
   114,    90,    62,   130,    98,   117,    91,   131,    54,    59,
    95,    58,   115,    58,   107,   138,    86,   126,   120,    70,
   157,    70,    98,   162,   149,   161,   134,   146,   104,   nil,
   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   148,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   134,   nil,   nil,   nil,   nil,   nil,   165,   166 ]

racc_goto_check = [
    46,    35,    31,    29,    34,    42,    48,    30,    43,    28,
    28,    28,    28,    49,    31,     1,    31,    31,    31,    31,
    41,     2,    41,     3,    55,    41,    41,    41,    55,    55,
     4,     5,    43,    48,    29,    35,    35,    49,    42,    34,
    42,    13,    13,    13,    31,    31,    30,    17,    17,    17,
     6,     7,     8,     9,    10,    31,    31,    31,    11,    12,
    31,    31,    31,    14,    15,    18,    30,    19,    20,    21,
    29,    22,    35,    23,    35,    34,    24,    25,    26,    27,
    32,    31,    33,    31,    37,    38,    39,    40,    47,    31,
    50,    31,    35,    51,    52,    53,    35,    46,    54,   nil,
   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    35,   nil,   nil,   nil,   nil,   nil,    46,    46 ]

racc_goto_pointer = [
   nil,    15,    21,    21,    21,    -2,    48,    45,   -22,    49,
    50,    45,    19,    26,    14,   -45,   nil,   -95,    15,   -43,
    17,   -42,    19,   -39,    23,   -36,    53,    53,   -18,   -22,
   -48,   -11,    22,   -13,   -22,   -25,   nil,    -1,   -40,    40,
   -21,   -46,   -62,    -1,   nil,   nil,   -37,   -17,   -99,  -108,
   -57,   -67,   -43,   -63,    21,  -127 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    57,    63,   nil,   nil,   nil,   153,    64,   nil,   nil,   nil,
   nil,    67,    69,   nil,    35,    37,   nil,   nil,   nil,   122,
   nil,   nil,   nil,   nil,   nil,   152 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 39, :_reduce_none,
  0, 40, :_reduce_none,
  2, 40, :_reduce_none,
  0, 45, :_reduce_4,
  0, 46, :_reduce_5,
  5, 44, :_reduce_6,
  2, 44, :_reduce_none,
  0, 41, :_reduce_8,
  2, 41, :_reduce_none,
  1, 47, :_reduce_none,
  2, 47, :_reduce_11,
  3, 47, :_reduce_none,
  2, 47, :_reduce_none,
  2, 47, :_reduce_none,
  2, 47, :_reduce_15,
  2, 47, :_reduce_16,
  0, 52, :_reduce_17,
  0, 53, :_reduce_18,
  6, 47, :_reduce_19,
  1, 47, :_reduce_none,
  0, 56, :_reduce_21,
  0, 57, :_reduce_22,
  6, 48, :_reduce_23,
  1, 48, :_reduce_none,
  0, 58, :_reduce_25,
  0, 59, :_reduce_26,
  7, 48, :_reduce_none,
  0, 60, :_reduce_28,
  0, 61, :_reduce_29,
  7, 48, :_reduce_30,
  0, 62, :_reduce_31,
  0, 63, :_reduce_32,
  7, 48, :_reduce_33,
  2, 54, :_reduce_none,
  2, 54, :_reduce_35,
  2, 54, :_reduce_36,
  2, 54, :_reduce_37,
  2, 54, :_reduce_38,
  2, 54, :_reduce_39,
  1, 64, :_reduce_40,
  2, 64, :_reduce_41,
  3, 64, :_reduce_42,
  1, 67, :_reduce_43,
  2, 67, :_reduce_44,
  3, 68, :_reduce_45,
  0, 70, :_reduce_none,
  1, 70, :_reduce_none,
  0, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 65, :_reduce_50,
  2, 65, :_reduce_51,
  3, 65, :_reduce_52,
  1, 72, :_reduce_53,
  2, 72, :_reduce_54,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  0, 75, :_reduce_57,
  0, 76, :_reduce_58,
  6, 51, :_reduce_59,
  0, 77, :_reduce_60,
  0, 78, :_reduce_61,
  5, 51, :_reduce_62,
  1, 66, :_reduce_63,
  2, 66, :_reduce_64,
  2, 66, :_reduce_65,
  1, 79, :_reduce_66,
  2, 79, :_reduce_67,
  1, 80, :_reduce_none,
  1, 69, :_reduce_69,
  1, 69, :_reduce_70,
  1, 42, :_reduce_none,
  2, 42, :_reduce_none,
  1, 81, :_reduce_none,
  2, 81, :_reduce_none,
  4, 82, :_reduce_75,
  1, 85, :_reduce_76,
  3, 85, :_reduce_77,
  2, 85, :_reduce_none,
  0, 86, :_reduce_79,
  3, 86, :_reduce_80,
  0, 88, :_reduce_81,
  0, 89, :_reduce_82,
  8, 86, :_reduce_83,
  0, 90, :_reduce_84,
  0, 91, :_reduce_85,
  7, 86, :_reduce_86,
  3, 86, :_reduce_87,
  0, 84, :_reduce_none,
  3, 84, :_reduce_89,
  0, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 83, :_reduce_none,
  0, 43, :_reduce_none,
  0, 92, :_reduce_94,
  3, 43, :_reduce_95,
  1, 49, :_reduce_none,
  0, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  1, 55, :_reduce_101,
  2, 55, :_reduce_102,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 74, :_reduce_105 ]

racc_reduce_n = 106

racc_shift_n = 167

racc_token_table = {
  false => 0,
  :error => 1,
  :C_DECLARATION => 2,
  :CHARACTER => 3,
  :IDENT_COLON => 4,
  :IDENTIFIER => 5,
  :INTEGER => 6,
  :STRING => 7,
  :TAG => 8,
  "%%" => 9,
  "%{" => 10,
  "%}" => 11,
  "%require" => 12,
  "%expect" => 13,
  "%define" => 14,
  "%param" => 15,
  "%lex-param" => 16,
  "%parse-param" => 17,
  "%initial-action" => 18,
  "{" => 19,
  "}" => 20,
  ";" => 21,
  "%union" => 22,
  "%destructor" => 23,
  "%printer" => 24,
  "%error-token" => 25,
  "%token" => 26,
  "%type" => 27,
  "%left" => 28,
  "%right" => 29,
  "%precedence" => 30,
  "%nonassoc" => 31,
  ":" => 32,
  "|" => 33,
  "%prec" => 34,
  "[" => 35,
  "]" => 36,
  "{...}" => 37 }

racc_nt_base = 38

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "C_DECLARATION",
  "CHARACTER",
  "IDENT_COLON",
  "IDENTIFIER",
  "INTEGER",
  "STRING",
  "TAG",
  "\"%%\"",
  "\"%{\"",
  "\"%}\"",
  "\"%require\"",
  "\"%expect\"",
  "\"%define\"",
  "\"%param\"",
  "\"%lex-param\"",
  "\"%parse-param\"",
  "\"%initial-action\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"%union\"",
  "\"%destructor\"",
  "\"%printer\"",
  "\"%error-token\"",
  "\"%token\"",
  "\"%type\"",
  "\"%left\"",
  "\"%right\"",
  "\"%precedence\"",
  "\"%nonassoc\"",
  "\":\"",
  "\"|\"",
  "\"%prec\"",
  "\"[\"",
  "\"]\"",
  "\"{...}\"",
  "$start",
  "input",
  "prologue_declarations",
  "bison_declarations",
  "grammar",
  "epilogue_opt",
  "prologue_declaration",
  "@1",
  "@2",
  "bison_declaration",
  "grammar_declaration",
  "variable",
  "value",
  "params",
  "@3",
  "@4",
  "symbol_declaration",
  "generic_symlist",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "token_declarations",
  "symbol_declarations",
  "token_declarations_for_precedence",
  "token_declaration_list",
  "token_declaration",
  "id",
  "int_opt",
  "alias",
  "symbol_declaration_list",
  "symbol",
  "string_as_id",
  "@13",
  "@14",
  "@15",
  "@16",
  "token_declaration_list_for_precedence",
  "token_declaration_for_precedence",
  "rules_or_grammar_declaration",
  "rules",
  "id_colon",
  "named_ref_opt",
  "rhs_list",
  "rhs",
  "tag_opt",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "generic_symlist_item" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_4(val, _values, result)
                                @lexer.status = :c_declaration
                            @lexer.end_symbol = '%}'
                            @grammar.prologue_first_lineno = @lexer.line

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_5(val, _values, result)
                                @lexer.status = :initial
                            @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_6(val, _values, result)
                                @grammar.prologue = val[2].s_value

    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_8(val, _values, result)
     result = ""
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_11(val, _values, result)
     @grammar.expect = val[1]
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_15(val, _values, result)
                             val[1].each {|token|
                           token.references = []
                           @grammar.lex_param = @grammar.build_code(:lex_param, token).token_code.s_value
                         }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_16(val, _values, result)
                             val[1].each {|token|
                           token.references = []
                           @grammar.parse_param = @grammar.build_code(:parse_param, token).token_code.s_value
                         }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_17(val, _values, result)
                             @lexer.status = :c_declaration
                         @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_18(val, _values, result)
                             @lexer.status = :initial
                         @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_19(val, _values, result)
                             @grammar.initial_action = @grammar.build_code(:initial_action, val[3])

    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_21(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_22(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_23(val, _values, result)
                               @grammar.set_union(@grammar.build_code(:union, val[3]), val[3].line)

    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_25(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_26(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_28(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_29(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_30(val, _values, result)
                               @grammar.add_printer(ident_or_tags: val[6], code: @grammar.build_code(:printer, val[3]), lineno: val[3].line)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_31(val, _values, result)
                               @lexer.status = :c_declaration
                           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_32(val, _values, result)
                               @lexer.status = :initial
                           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_33(val, _values, result)
                               @grammar.add_error_token(ident_or_tags: val[6], code: @grammar.build_code(:error_token, val[3]), lineno: val[3].line)

    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_35(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              @grammar.add_type(id: id, tag: hash[:tag])
                            }
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_36(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_left(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_37(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_right(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_38(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_precedence(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_39(val, _values, result)
                              val[1].each {|hash|
                            hash[:tokens].each {|id|
                              sym = @grammar.add_term(id: id)
                              @grammar.add_nonassoc(sym, @precedence_number)
                            }
                          }
                          @precedence_number += 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_40(val, _values, result)
                              val[0].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: nil, replace: true)
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_41(val, _values, result)
                              val[1].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[0], replace: true)
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_42(val, _values, result)
                              val[2].each {|token_declaration|
                            @grammar.add_term(id: token_declaration[0], alias_name: token_declaration[2], token_id: token_declaration[1], tag: val[1], replace: true)
                          }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_43(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 188)
  def _reduce_44(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_45(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_50(val, _values, result)
                               result = [{tag: nil, tokens: val[0]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_51(val, _values, result)
                               result = [{tag: val[0], tokens: val[1]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_52(val, _values, result)
                             result = val[0].append({tag: val[1], tokens: val[2]})

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_53(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_54(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_57(val, _values, result)
                  @lexer.status = :c_declaration
              @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_58(val, _values, result)
                  @lexer.status = :initial
              @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_59(val, _values, result)
                  result = val[0].append(val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_60(val, _values, result)
                  @lexer.status = :c_declaration
              @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_61(val, _values, result)
                  @lexer.status = :initial
              @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_62(val, _values, result)
                  result = [val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_63(val, _values, result)
                                             result = [{tag: nil, tokens: val[0]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 252)
  def _reduce_64(val, _values, result)
                                             result = [{tag: val[0], tokens: val[1]}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_65(val, _values, result)
                                             result = val[0].append({tag: nil, tokens: val[1]})

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_66(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_67(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_69(val, _values, result)
     raise "Ident after %prec" if @prec_seen
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 265)
  def _reduce_70(val, _values, result)
     raise "Char after %prec" if @prec_seen
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.y', 275)
  def _reduce_75(val, _values, result)
                 lhs = val[0]
             lhs.alias = val[1]
             val[3].each {|hash|
               @grammar.add_rule(lhs: lhs, rhs: hash[:rhs], lineno: hash[:lineno])
             }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 284)
  def _reduce_76(val, _values, result)
                    result = [{rhs: val[0], lineno: val[0].first&.line || @lexer.line - 1}]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_77(val, _values, result)
                    result = val[0].append({rhs: val[2], lineno: val[2].first&.line || @lexer.line - 1})

    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_79(val, _values, result)
               result = []
           @prec_seen = false
           @code_after_prec = false

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_80(val, _values, result)
               token = val[1]
           token.alias = val[2]
           result = val[0].append(token)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 306)
  def _reduce_81(val, _values, result)
               if @prec_seen
             raise "Multiple User_code after %prec" if @code_after_prec
             @code_after_prec = true
           end
           @lexer.status = :c_declaration
           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_82(val, _values, result)
               @lexer.status = :initial
           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 320)
  def _reduce_83(val, _values, result)
               token = val[4]
           token.tag = val[1]
           token.alias = val[7]
           result = val[0].append(token)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_84(val, _values, result)
               if @prec_seen
             raise "Multiple User_code after %prec" if @code_after_prec
             @code_after_prec = true
           end
           @lexer.status = :c_declaration
           @lexer.end_symbol = '}'

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_85(val, _values, result)
               @lexer.status = :initial
           @lexer.end_symbol = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_86(val, _values, result)
               token = val[3]
           token.tag = val[0]
           token.alias = val[6]
           result = [token]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_87(val, _values, result)
               sym = @grammar.find_symbol_by_id!(val[2])
           result = val[0].append(sym)
           @prec_seen = true

    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_89(val, _values, result)
     result = val[1].s_value
    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.y', 364)
  def _reduce_94(val, _values, result)
                        @lexer.status = :c_declaration
                    @lexer.end_symbol = '\Z'
                    @grammar.epilogue_first_lineno = @lexer.line + 1

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 370)
  def _reduce_95(val, _values, result)
                        @lexer.status = :initial
                    @lexer.end_symbol = nil
                    @grammar.epilogue = val[2].s_value

    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_101(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_102(val, _values, result)
     result = val[0].append(val[1])
    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_105(val, _values, result)
     result = Lrama::Lexer::Token.new(type: Lrama::Lexer::Token::Ident, s_value: val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Lrama
